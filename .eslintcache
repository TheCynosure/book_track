[{"/home/jack/Dev/Projects/book_track/src/index.js":"1","/home/jack/Dev/Projects/book_track/src/components/BookList.js":"2","/home/jack/Dev/Projects/book_track/src/views/Main.js":"3","/home/jack/Dev/Projects/book_track/src/components/BookIconHeader.js":"4","/home/jack/Dev/Projects/book_track/src/components/NewBookButton.js":"5","/home/jack/Dev/Projects/book_track/src/components/NewBookCreationModal.js":"6","/home/jack/Dev/Projects/book_track/src/components/BookListEntry.js":"7","/home/jack/Dev/Projects/book_track/src/components/BookPageConfigForm.js":"8","/home/jack/Dev/Projects/book_track/src/components/ReadingGoalProgressBar.js":"9"},{"size":275,"mtime":1606949031303,"results":"10","hashOfConfig":"11"},{"size":862,"mtime":1606949031303,"results":"12","hashOfConfig":"11"},{"size":7090,"mtime":1606949031303,"results":"13","hashOfConfig":"11"},{"size":462,"mtime":1606949031303,"results":"14","hashOfConfig":"11"},{"size":477,"mtime":1606949031303,"results":"15","hashOfConfig":"11"},{"size":2902,"mtime":1606949031303,"results":"16","hashOfConfig":"11"},{"size":3128,"mtime":1606950869346,"results":"17","hashOfConfig":"11"},{"size":1859,"mtime":1606949031303,"results":"18","hashOfConfig":"11"},{"size":361,"mtime":1606949031303,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"shuapd",{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"22"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"22"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"22"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"38","messages":"39","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"22"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"/home/jack/Dev/Projects/book_track/src/index.js",[],["43","44"],"/home/jack/Dev/Projects/book_track/src/components/BookList.js",["45"],"import React from 'react';\nimport {Container, Row, Col, ListGroup, InputGroup} from 'react-bootstrap';\nimport BookListEntry from './BookListEntry';\n\nexport default function BookList(props) {\n  // If active then render the extra information.\n  return (\n    <Container>\n      <Row>\n      </Row>\n      <Row>\n        <Col>\n          <ListGroup>\n            {props.books.map((book, index) => \n              <BookListEntry\n                book={book}\n                updateBook={(current_page, length) => props.updateBook(book.title)(current_page, length)}\n                removeBook={() => props.removeBook(book.title)}\n                finishBook={() => props.finishBook(book.title)}\n                key={book.title}\n                disabled={props.disabled}\n              />\n            )}\n          </ListGroup>\n        </Col>\n      </Row>\n    </Container>\n  );\n}\n\n","/home/jack/Dev/Projects/book_track/src/views/Main.js",["46"],"import React from 'react';\nimport BookIconHeader from '../components/BookIconHeader';\nimport BookList from '../components/BookList';\nimport {Container, Spinner, Row, Col} from 'react-bootstrap';\nimport NewBookButton from '../components/NewBookButton';\nimport NewBookCreationModal from '../components/NewBookCreationModal';\nimport Confetti from 'react-confetti';\nimport ReactTimeout from 'react-timeout';\nimport ReadingGoalProgressBar from '../components/ReadingGoalProgressBar';\n\nclass Main extends React.Component {\n  \n  constructor(props) {\n    super(props);\n    this.state = {\n      books: [],\n      history: [],\n      showAddModal: false,\n      windowSize: {width: undefined, height: undefined},\n      showConfetti: false,\n      isLoaded: false,\n    }\n  }\n\n  handleResize() {\n     this.setState({windowSize: {\n       width: window.innerWidth,\n       height: window.innerHeight,\n     }});\n  }\n\n  componentDidMount() {\n    window.addEventListener(\"resize\", () => this.handleResize());\n    this.getAllBooks();\n  }\n\n  componentWillUnmount() {\n    window.addEventListener(\"resize\", () => this.handleResize());\n  }\n\n  async getAllBooks() {\n    await this.getBooks();\n    await this.getBooks(true);\n  }\n\n  async getBooks(fromHistory=false) {\n    // Before the fetch make sure the page knows we are loading.\n    const location =\n        'http://localhost:8080/' + ((fromHistory)? 'history' : 'books');\n    fetch(location).then((res) => {\n        if (res.status === 304) {\n          // There is nothing to change\n          this.setState({ isLoaded: false });\n        } else {\n          res.json().then((result) => {\n            // Response was successful!\n            if (fromHistory) {\n              this.setState({ history: result, isLoaded: true });\n            } else {\n              this.setState({ books: result, isLoaded: true });\n            }\n          }).catch((error) => {\n            console.log(error)\n            this.setState({ isLoaded: true, error });\n          });\n        }\n      },\n      (error) => {\n        // TODO: We should retry on network error.\n        console.error(error);\n        this.setState({isLoaded: true, error});\n      });\n  }\n\n  updateBook(book_title) {\n    return async (new_current_page, new_length) => {\n      let books = this.state.books.slice();\n      const book_to_update =\n          books.find(book => book.title === book_title);\n      book_to_update.current_page = new_current_page;\n      book_to_update.length = new_length;\n\n      const headers = new Headers();\n      headers.append('Content-Type', 'application/json');\n\n      const settings = {\n        method: 'PUT',\n        headers,\n        body: JSON.stringify(book_to_update)\n      }\n\n      const request = new Request('http://localhost:8080/books', settings);\n      const response = await fetch(request);\n\n      if (response.status === 200) {\n        this.setState({ isLoaded: true });\n        await this.getAllBooks();\n      }\n    }\n  }\n\n  async removeBook(book_title) {\n    this.setState({ isLoaded: false });\n    let books = this.state.books.slice();\n    let finished_book =\n        books.filter(curr_book => curr_book.title === book_title);\n    if (finished_book.length === 0) {\n      console.error('No matching book for one deleted.');\n      return;\n    }\n    console.log(finished_book[0].title)\n\n    const headers = new Headers();\n    headers.append('Content-Type', 'application/json');\n\n    const settings = {\n      method: 'DELETE',\n      headers,\n      body: JSON.stringify(finished_book[0])\n    }\n\n    const request = new Request('http://localhost:8080/books', settings);\n    const response = await fetch(request);\n\n    if (response.status === 200) {\n      this.setState({ isLoaded: true });\n      await this.getAllBooks();\n    }\n\n    return finished_book;\n  }\n\n  finishBook(book_title) {\n    let finished_book =\n        this.state.books.filter(book => book.title === book_title)[0];\n    this.removeBook(book_title).then(() => {\n      this.spawnConfetti();\n      this.addBook(finished_book.title, finished_book.length, true);\n    });\n  }\n\n  promptNewBookModal() {\n    this.setState({showAddModal: true});\n  }\n\n  async addBook(title, length, toHistory=false) {\n    this.setState({ isLoaded: false });\n    // We are going to post the new book, and on success re-fetch all the data.\n    const new_book = {\n      title: title,\n      current_page: (toHistory)? length : 0,\n      length: length\n    };\n    const headers = new Headers();\n    headers.append('Content-Type', 'application/json');\n\n    const settings = {\n      method: 'POST',\n      headers,\n      body: JSON.stringify(new_book)\n    }\n\n    const location =\n        \"http://localhost:8080/\" + ((toHistory)? \"history\" : \"books\");\n\n    this.setState({showAddModal: false});\n    const request = new Request(location, settings);\n    const response = await fetch(request);\n\n    if (response.status === 200) {\n      this.setState({ isLoaded: true });\n      await this.getAllBooks();\n    }\n  }\n\n  spawnConfetti() {\n    this.setState({\n      showConfetti: true\n    });\n  }\n\n  onConfettiComplete(confetti) {\n    this.setState({ showConfetti: false })\n    confetti.reset();\n  }\n\n  isTitleUnique(title) {\n    return this.state.books.filter((curr) => curr.title === title).length === 0\n  }\n\n  renderBookHistory() {\n    if (this.state.history.length > 0) {\n      return (\n        <Container className=\"p-0\">\n          <Row className=\"p-0\">\n            <Col>\n              <ReadingGoalProgressBar\n                  current={this.state.history.length}\n                  total={this.state.history.length + this.state.books.length}\n              />\n            </Col>\n          </Row>\n          <Row className=\"p-0\">\n            <Col>\n              <BookList\n                  books={this.state.history}\n                  disabled={true}\n              />\n            </Col>\n          </Row>\n        </Container>\n      );\n    }\n  }\n\n  renderMainScreen() {\n    const width = this.state.windowSize.width;\n    const height = this.state.windowSize.height;\n    return (\n      <Container>\n        <Confetti\n          width={width}\n          height={height}\n          recycle={false}\n          numberOfPieces={this.state.showConfetti ? 500 : 0}\n          onConfettiComplete={(confetti) => this.onConfettiComplete(confetti)}\n        />\n        <BookList\n          books={this.state.books}\n          updateBook={(index) => this.updateBook(index)}\n          removeBook={(index) => this.removeBook(index)}\n          finishBook={(index) => this.finishBook(index)}\n        />\n        <NewBookButton handleNewBook={() => this.promptNewBookModal()}/>\n        {this.renderBookHistory()}\n        <NewBookCreationModal\n          show={this.state.showAddModal}\n          onAdd={(title, length) => this.addBook(title, length)}\n          onCancel={() => this.setState({showAddModal: false})}\n          checkValid={(title) => this.isTitleUnique(title)}\n        />\n      </Container>\n    );\n  }\n\n  render() {\n    return (\n      <Container>\n        <BookIconHeader/>\n        {this.renderMainScreen()}\n      </Container>\n    );\n  }\n}\n\nexport default ReactTimeout(Main);\n","/home/jack/Dev/Projects/book_track/src/components/BookIconHeader.js",["47","48","49","50"],"import React from 'react';\nimport {Animated, Easing, View} from 'react-native';\nimport {Container, Collapse} from 'react-bootstrap';\nimport {Book} from 'react-bootstrap-icons';\n\nclass BookIconHeader extends React.Component {\n    render() {\n        return (\n            <Container className=\"mt-5 mb-5 text-center\">\n                <h1>\n                    <Book/>\n                </h1>\n            </Container>\n        );\n    }\n}\n\nexport default BookIconHeader;\n","/home/jack/Dev/Projects/book_track/src/components/NewBookButton.js",[],"/home/jack/Dev/Projects/book_track/src/components/NewBookCreationModal.js",[],"/home/jack/Dev/Projects/book_track/src/components/BookListEntry.js",["51","52","53"],"/home/jack/Dev/Projects/book_track/src/components/BookPageConfigForm.js",["54","55","56","57","58"],"import React from 'react';\nimport {Collapse, Button, FormControl, ListGroup, Container, Row, Col, ProgressBar, InputGroup} from 'react-bootstrap';\nimport {PencilSquare, Check, Trash} from 'react-bootstrap-icons';\n\nfunction handleProgressChange(event, props) {\n  if (isNaN(Number(event.target.value))) {\n    return;\n  }\n  if (Number(event.target.value) > props.length) {\n    event.target.value = props.length;\n  }\n  props.updateBook(Number(event.target.value), props.length);\n}\n\nfunction handleMaxChange(event, props) {\n  if (isNaN(Number(event.target.value))) {\n    return;\n  }\n  props.updateBook(props.current_page, Number(event.target.value));\n}\n\nexport default function BookPageConfigForm(props) {\n  return (\n    <Container className=\"w-100 p-0\">\n      <hr></hr>\n      <Row className=\"pt-3 pb-3\">  \n        <Col sm={3}>\n          <InputGroup>\n            <InputGroup.Prepend>\n              <InputGroup.Text>\n                Page #\n              </InputGroup.Text>\n            </InputGroup.Prepend>\n            <FormControl\n              placeholder={props.current_page}\n              onChange={(event) => handleProgressChange(event, props)}\n            />\n          </InputGroup>\n        </Col>\n        <Col sm={3}>\n          <InputGroup>\n            <InputGroup.Prepend>\n              <InputGroup.Text>\n                Max Page #\n              </InputGroup.Text>\n            </InputGroup.Prepend>\n            <FormControl\n              placeholder={props.length}\n              onChange={(event) => handleMaxChange(event, props)}\n            />\n          </InputGroup>\n        </Col>\n        <Col md={{ span: 1, offset: 5}}>\n          <Button\n            variant=\"danger\"\n            className=\"btn-sm\"\n            onClick={() => props.removeBook()}\n          >\n            <Trash/> \n          </Button>\n        </Col>\n      </Row>\n    </Container>\n  );\n}\n","/home/jack/Dev/Projects/book_track/src/components/ReadingGoalProgressBar.js",[],{"ruleId":"59","replacedBy":"60"},{"ruleId":"61","replacedBy":"62"},{"ruleId":"63","severity":1,"message":"64","line":2,"column":41,"nodeType":"65","messageId":"66","endLine":2,"endColumn":51},{"ruleId":"63","severity":1,"message":"67","line":4,"column":20,"nodeType":"65","messageId":"66","endLine":4,"endColumn":27},{"ruleId":"63","severity":1,"message":"68","line":2,"column":9,"nodeType":"65","messageId":"66","endLine":2,"endColumn":17},{"ruleId":"63","severity":1,"message":"69","line":2,"column":19,"nodeType":"65","messageId":"66","endLine":2,"endColumn":25},{"ruleId":"63","severity":1,"message":"70","line":2,"column":27,"nodeType":"65","messageId":"66","endLine":2,"endColumn":31},{"ruleId":"63","severity":1,"message":"71","line":3,"column":20,"nodeType":"65","messageId":"66","endLine":3,"endColumn":28},{"ruleId":"63","severity":1,"message":"72","line":2,"column":27,"nodeType":"65","messageId":"66","endLine":2,"endColumn":38},{"ruleId":"63","severity":1,"message":"64","line":2,"column":85,"nodeType":"65","messageId":"66","endLine":2,"endColumn":95},{"ruleId":"63","severity":1,"message":"73","line":3,"column":30,"nodeType":"65","messageId":"66","endLine":3,"endColumn":35},{"ruleId":"63","severity":1,"message":"71","line":2,"column":9,"nodeType":"65","messageId":"66","endLine":2,"endColumn":17},{"ruleId":"63","severity":1,"message":"74","line":2,"column":40,"nodeType":"65","messageId":"66","endLine":2,"endColumn":49},{"ruleId":"63","severity":1,"message":"75","line":2,"column":72,"nodeType":"65","messageId":"66","endLine":2,"endColumn":83},{"ruleId":"63","severity":1,"message":"76","line":3,"column":9,"nodeType":"65","messageId":"66","endLine":3,"endColumn":21},{"ruleId":"63","severity":1,"message":"77","line":3,"column":23,"nodeType":"65","messageId":"66","endLine":3,"endColumn":28},"no-native-reassign",["78"],"no-negated-in-lhs",["79"],"no-unused-vars","'InputGroup' is defined but never used.","Identifier","unusedVar","'Spinner' is defined but never used.","'Animated' is defined but never used.","'Easing' is defined but never used.","'View' is defined but never used.","'Collapse' is defined but never used.","'FormControl' is defined but never used.","'Trash' is defined but never used.","'ListGroup' is defined but never used.","'ProgressBar' is defined but never used.","'PencilSquare' is defined but never used.","'Check' is defined but never used.","no-global-assign","no-unsafe-negation"]