[{"/home/jack/Dev/Projects/book_track/src/index.js":"1","/home/jack/Dev/Projects/book_track/src/views/Header.js":"2","/home/jack/Dev/Projects/book_track/src/views/Stats.js":"3","/home/jack/Dev/Projects/book_track/src/components/IconHeader.js":"4","/home/jack/Dev/Projects/book_track/src/views/Main.js":"5","/home/jack/Dev/Projects/book_track/src/components/BookList.js":"6","/home/jack/Dev/Projects/book_track/src/components/NewBookButton.js":"7","/home/jack/Dev/Projects/book_track/src/components/ReadingGoalProgressBar.js":"8","/home/jack/Dev/Projects/book_track/src/components/NewBookCreationModal.js":"9","/home/jack/Dev/Projects/book_track/src/components/BookListEntry.js":"10","/home/jack/Dev/Projects/book_track/src/components/BookPageConfigForm.js":"11","/home/jack/Dev/Projects/book_track/src/views/Splash.js":"12"},{"size":731,"mtime":1608822238936,"results":"13","hashOfConfig":"14"},{"size":780,"mtime":1607046355587,"results":"15","hashOfConfig":"14"},{"size":229,"mtime":1607040415561,"results":"16","hashOfConfig":"14"},{"size":2016,"mtime":1607051464939,"results":"17","hashOfConfig":"14"},{"size":8303,"mtime":1608781335971,"results":"18","hashOfConfig":"14"},{"size":837,"mtime":1607044790806,"results":"19","hashOfConfig":"14"},{"size":477,"mtime":1606949031303,"results":"20","hashOfConfig":"14"},{"size":683,"mtime":1606953215492,"results":"21","hashOfConfig":"14"},{"size":4276,"mtime":1608783235091,"results":"22","hashOfConfig":"14"},{"size":5008,"mtime":1607044907871,"results":"23","hashOfConfig":"14"},{"size":3096,"mtime":1607045003493,"results":"24","hashOfConfig":"14"},{"size":1232,"mtime":1608822282058,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"shuapd",{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"30"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"30"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"30"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"30"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"30"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"30"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/jack/Dev/Projects/book_track/src/index.js",["57"],"/home/jack/Dev/Projects/book_track/src/views/Header.js",[],["58","59"],"/home/jack/Dev/Projects/book_track/src/views/Stats.js",[],"/home/jack/Dev/Projects/book_track/src/components/IconHeader.js",["60","61","62","63","64"],"import React from 'react';\nimport {Animated, Easing, View} from 'react-native';\nimport {Container, Collapse} from 'react-bootstrap';\nimport {Book, GraphUp} from 'react-bootstrap-icons';\n\nclass IconHeader extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            style: {\n                opacity: 1\n            }\n        }\n    }\n\n    componentWillReceiveProps(nextProps, nextContext) {\n        if (nextProps.showBook !== this.props.showBook) {\n            // They want us to switch! Start the visibility transition.\n            setTimeout(() => this.visibleStyle(), 10);\n        }\n    }\n\n    visibleStyle(callback) {\n        this.callback = callback;\n        this.setState({\n            style: {\n                opacity: 1,\n                transition: 'all .2s ease'\n            }\n        });\n    }\n\n    invisibleStyle(callback) {\n        this.callback = callback;\n        this.setState({\n            open: false,\n            style: {\n                opacity: 0,\n                transition: 'all .2s ease'\n            }\n        });\n    }\n\n    transitionEnd(e) {\n        // Call the callback after the animation is officially over.\n        if (e.target.className.includes(\"IconHeader\")) {\n            this.execCallback();\n        }\n    }\n\n    execCallback() {\n        if (this.callback !== undefined) {\n            this.callback();\n        }\n    }\n\n    onClick() {\n        // First make this invisible.\n        this.invisibleStyle(() => {\n            // Once invisible, we want to call the parents function.\n            this.props.onClick();\n        })\n    }\n\n    render() {\n        return (\n            <Container className=\"mt-5 mb-5 text-center\">\n                <h1\n                    onTransitionEnd={(e) => this.transitionEnd(e)}\n                    className={\"IconHeader\"}\n                    style={this.state.style}\n                >\n                    <Book />\n                </h1>\n            </Container>\n        );\n    }\n}\n\nexport default IconHeader;\n","/home/jack/Dev/Projects/book_track/src/views/Main.js",["65","66"],"import React from 'react';\nimport IconHeader from '../components/IconHeader';\nimport BookList from '../components/BookList';\nimport {Container, Spinner, Row, Col} from 'react-bootstrap';\nimport NewBookButton from '../components/NewBookButton';\nimport NewBookCreationModal from '../components/NewBookCreationModal';\nimport Confetti from 'react-confetti';\nimport ReactTimeout from 'react-timeout';\nimport ReadingGoalProgressBar from '../components/ReadingGoalProgressBar';\n\nconst server = 'https://book-track-backend.herokuapp.com/'\n\nclass Main extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            books: [],\n            history: [],\n            showAddModal: false,\n            windowSize: {width: undefined, height: undefined},\n            showConfetti: false,\n            isLoaded: false,\n        }\n    }\n\n    handleResize() {\n        this.setState({\n            windowSize: {\n                width: window.innerWidth,\n                height: window.innerHeight,\n            }\n        });\n    }\n\n    componentDidMount() {\n        window.addEventListener(\"resize\", () => this.handleResize());\n        this.getAllBooks();\n    }\n\n    componentWillUnmount() {\n        window.addEventListener(\"resize\", () => this.handleResize());\n    }\n\n    async getAllBooks() {\n        await this.getBooks();\n        await this.getBooks(true);\n    }\n\n    async getBooks(fromHistory = false) {\n        // Before the fetch make sure the page knows we are loading.\n        const location =\n            server + ((fromHistory) ? 'history' : 'books');\n        fetch(location).then((res) => {\n                if (res.status === 304) {\n                    // There is nothing to change\n                    this.setState({isLoaded: false});\n                } else {\n                    res.json().then((result) => {\n                        // Response was successful!\n                        if (fromHistory) {\n                            this.setState({history: result, isLoaded: true});\n                        } else {\n                            this.setState({books: result, isLoaded: true});\n                        }\n                    }).catch((error) => {\n                        console.log(error)\n                        this.setState({isLoaded: true, error});\n                    });\n                }\n            },\n            (error) => {\n                // TODO: We should retry on network error.\n                console.error(error);\n                this.setState({isLoaded: true, error});\n            });\n    }\n\n    updateBook(book_title) {\n        return async (new_current_page, new_length) => {\n            let books = this.state.books.slice();\n            const book_to_update =\n                books.find(book => book.title === book_title);\n            book_to_update.current_page = new_current_page;\n            book_to_update.length = new_length;\n\n            const headers = new Headers();\n            headers.append('Content-Type', 'application/json');\n\n            const settings = {\n                method: 'PUT',\n                headers,\n                body: JSON.stringify(book_to_update)\n            }\n\n            const request = new Request(server + 'books', settings);\n            const response = await fetch(request);\n\n            if (response.status === 200) {\n                this.setState({isLoaded: true});\n                await this.getAllBooks();\n            }\n        }\n    }\n\n    async removeBook(book_title) {\n        this.setState({isLoaded: false});\n        let books = this.state.books.slice();\n        let finished_book =\n            books.filter(curr_book => curr_book.title === book_title);\n        if (finished_book.length === 0) {\n            console.error('No matching book for one deleted.');\n            return;\n        }\n        console.log(finished_book[0].title)\n\n        const headers = new Headers();\n        headers.append('Content-Type', 'application/json');\n\n        const settings = {\n            method: 'DELETE',\n            headers,\n            body: JSON.stringify(finished_book[0])\n        }\n\n        const request = new Request(server + 'books', settings);\n        const response = await fetch(request);\n\n        if (response.status === 200) {\n            this.setState({isLoaded: true});\n            await this.getAllBooks();\n        }\n\n        return finished_book;\n    }\n\n    finishBook(book_title) {\n        let finished_book =\n            this.state.books.filter(book => book.title === book_title)[0];\n        this.removeBook(book_title).then(() => {\n            this.spawnConfetti();\n            this.addBook(finished_book, true);\n        });\n    }\n\n    promptNewBookModal() {\n        this.setState({showAddModal: true});\n    }\n\n    async addBook(book, toHistory = false) {\n        this.setState({isLoaded: false});\n        // We are going to post the new book, and on success re-fetch all the data.\n        book.current_page = (toHistory)? book.length : 0;\n        const headers = new Headers();\n        headers.append('Content-Type', 'application/json');\n\n        const settings = {\n            method: 'POST',\n            headers,\n            body: JSON.stringify(book)\n        }\n\n        const location =\n            server + ((toHistory) ? \"history\" : \"books\");\n\n        this.setState({showAddModal: false});\n        const request = new Request(location, settings);\n        const response = await fetch(request);\n\n        if (response.status === 200) {\n            this.setState({isLoaded: true});\n            await this.getAllBooks();\n        }\n    }\n\n    spawnConfetti() {\n        this.setState({\n            showConfetti: true\n        });\n    }\n\n    onConfettiComplete(confetti) {\n        this.setState({showConfetti: false})\n        confetti.reset();\n    }\n\n    isTitleUnique(title) {\n        return this.state.books.filter((curr) => curr.title === title).length === 0\n    }\n\n    renderBookHistory() {\n        if (this.state.history.length > 0) {\n            return (\n                <Container className=\"p-0\">\n                    <Row className=\"p-0\">\n                        <Col>\n                            <ReadingGoalProgressBar\n                                current={this.state.history.length}\n                                total={this.state.history.length + this.state.books.length}\n                            />\n                        </Col>\n                    </Row>\n                    <Row className=\"p-0\">\n                        <Col>\n                            <BookList\n                                books={this.state.history}\n                                disabled={true}\n                            />\n                        </Col>\n                    </Row>\n                </Container>\n            );\n        }\n    }\n\n    renderMainScreen() {\n        const width = this.state.windowSize.width;\n        const height = this.state.windowSize.height;\n        return (\n            <Container\n                lg={8}\n                md={8}\n                sm={8}\n                xs={12}\n            >\n                <Confetti\n                    width={width}\n                    height={height}\n                    recycle={false}\n                    numberOfPieces={this.state.showConfetti ? 500 : 0}\n                    onConfettiComplete={(confetti) => this.onConfettiComplete(confetti)}\n                />\n                <BookList\n                    books={this.state.books}\n                    updateBook={(index) => this.updateBook(index)}\n                    removeBook={(index) => this.removeBook(index)}\n                    finishBook={(index) => this.finishBook(index)}\n                />\n                <NewBookButton handleNewBook={() => this.promptNewBookModal()}/>\n                {this.renderBookHistory()}\n                <NewBookCreationModal\n                    show={this.state.showAddModal}\n                    onAdd={(book) => this.addBook(book)}\n                    onCancel={() => this.setState({showAddModal: false})}\n                    checkValid={(title) => this.isTitleUnique(title)}\n                />\n            </Container>\n        );\n    }\n\n    render() {\n        return (\n            <Container>\n                {this.renderMainScreen()}\n            </Container>\n        );\n    }\n}\n\nexport default ReactTimeout(Main);\n","/home/jack/Dev/Projects/book_track/src/components/BookList.js",["67"],"import React from 'react';\nimport {Container, Row, Col, ListGroup, InputGroup} from 'react-bootstrap';\nimport BookListEntry from './BookListEntry';\n\nexport default function BookList(props) {\n  // If active then render the extra information.\n  return (\n    <Container>\n      <Row>\n        <Col>\n          <ListGroup>\n            {props.books.map((book, index) => \n              <BookListEntry\n                book={book}\n                updateBook={(current_page, length) => props.updateBook(book.title)(current_page, length)}\n                removeBook={() => props.removeBook(book.title)}\n                finishBook={() => props.finishBook(book.title)}\n                key={book.title}\n                disabled={props.disabled}\n              />\n            )}\n          </ListGroup>\n        </Col>\n      </Row>\n    </Container>\n  );\n}\n\n","/home/jack/Dev/Projects/book_track/src/components/NewBookButton.js",[],"/home/jack/Dev/Projects/book_track/src/components/ReadingGoalProgressBar.js",[],"/home/jack/Dev/Projects/book_track/src/components/NewBookCreationModal.js",["68","69","70"],"import React, {forwardRef, useState} from 'react';\nimport {Button, Modal, Container, Row, Col, InputGroup, FormControl, Dropdown} from 'react-bootstrap';\nimport {Globe} from \"react-bootstrap-icons\";\n\nconst server = 'https://book-track-backend.herokuapp.com/'\n\nexport default class NewBookCreationModal extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      title: '',\n      length: 1,\n      isTitleInputValid: false,\n      isLengthInputValid: false,\n      possibleGBooks: []\n    }\n  }\n\n  updatePossibleGBooks(prefix) {\n    const location = server + 'gbooks/search/' + prefix;\n    fetch(location).then(r => {\n        r.json().then(result => {\n            this.setState({ possibleGBooks: result });\n        }).catch(err => {\n            console.error(err);\n            this.setState({ possibleGBooks: [] });\n        })\n    });\n  }\n\n  onTitleChange(event) {\n    if (event.target.value === null ||\n        event.target.value.length === 0 ||\n        !this.props.checkValid(event.target.value)) {\n      this.setState({title: event.target.value, isTitleInputValid: false});\n      return;\n    }\n    this.updatePossibleGBooks(event.target.value);\n    this.setState({title: event.target.value, isTitleInputValid: true});\n  }\n\n  onMaxChange(event) {\n    if (isNaN(Number(event.target.value)) || Number(event.target.value) <= 0) {\n      this.setState({length: 1, isLengthInputValid: false});\n      return;\n    }\n    this.setState({length: event.target.value, isLengthInputValid: true});\n  }\n\n  handleSubmit() {\n    let title = this.state.title;\n    let length = this.state.length;\n    let link = this.hasExactGBookMatch()?\n        'https://www.gutenberg.org/ebooks/' + this.getExactGBookMatches()[0].number:\n        '';\n    this.setState({\n      title: '',\n      length: 1,\n      isTitleInputValid: false,\n      isLengthInputValid: false,\n      possibleGBooks: []\n    });\n    this.props.onAdd({ title: title, length: length, link: link });\n  }\n\n  hasExactGBookMatch() {\n    return this.getExactGBookMatches().length >= 1;\n  }\n\n  getExactGBookMatches() {\n    return this.state.possibleGBooks.filter((book) => {\n      return book.title === this.state.title;\n    });\n  }\n\n  render() {\n    return (\n      <Modal\n        show={this.props.show}\n        onHide={() => this.props.onCancel()}\n        backdrop=\"static\"\n      >\n        <Modal.Header closeButton>\n          <Modal.Title>Add A Book</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <Container>\n            <Row className=\"m-2\">  \n              <Col>\n                <InputGroup>\n                  <InputGroup.Prepend>\n                    <InputGroup.Text>\n                      Title\n                    </InputGroup.Text>\n                  </InputGroup.Prepend>\n                  <FormControl\n                      onChange={(event) => this.onTitleChange(event)}\n                  />\n                  <InputGroup.Append>\n                    <InputGroup.Text>\n                      <Globe className={\n                        this.state.possibleGBooks.length > 0?\n                            (this.hasExactGBookMatch() ? \"text-success\" : \"text-info\"):\n                            \"text-secondary\"}/>\n                    </InputGroup.Text>\n                  </InputGroup.Append>\n                </InputGroup>\n              </Col>\n            </Row>\n            <Row className=\"m-2\">\n              <Col>\n                <InputGroup>\n                  <InputGroup.Prepend>\n                    <InputGroup.Text>\n                      Max Page #\n                    </InputGroup.Text>\n                  </InputGroup.Prepend>\n                  <FormControl\n                    onChange={(event) => this.onMaxChange(event)} \n                  />\n                </InputGroup>\n              </Col>\n            </Row>\n          </Container>\n        </Modal.Body>\n        <Modal.Footer>\n          <Button variant=\"secondary\" onClick={() => this.props.onCancel()}>\n            Cancel\n          </Button>\n          <Button\n            variant=\"primary\"\n            onClick={() => this.handleSubmit()}\n            disabled={!(this.state.isTitleInputValid && this.state.isLengthInputValid)}\n          >\n            Add\n          </Button>\n        </Modal.Footer>\n      </Modal>\n    );\n  }\n}\n","/home/jack/Dev/Projects/book_track/src/components/BookListEntry.js",["71","72","73"],"import React from 'react';\nimport {Collapse, Button, FormControl, ListGroup, Container, Row, Col, ProgressBar, InputGroup} from 'react-bootstrap';\nimport {PencilSquare, Check, Trash} from 'react-bootstrap-icons';\nimport BookPageConfigForm from './BookPageConfigForm';\n\nexport default class BookListEntry extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      open: false,\n      show: true,\n      style: {\n        opacity: 0,\n      }\n    }\n  }\n\n  componentDidMount() {\n    // Shortly after mounting we will render the element visible.\n    setTimeout(() => this.visibleStyle(), 10);\n  }\n  //\n  // componentWillReceiveProps(newProps, nextContext) {\n  //   if () {\n  //     return this.invisibleStyle();\n  //   }\n  //\n  //   // Otherwise, we should be visible!\n  //   this.setState({\n  //     show: true\n  //   });\n  //   setTimeout(() => this.visibleStyle(), 10);\n  // }\n\n  visibleStyle() {\n    this.setState({\n      style: {\n        opacity: 1,\n        transition: 'all .3s ease'\n      }\n    })\n  }\n\n  invisibleStyle(callback) {\n    this.callback = callback;\n    this.setState({\n      open: false,\n      style: {\n        opacity: 0,\n        transition: 'all .3s ease'\n      }\n    });\n  }\n\n  transitionEnd(e) {\n    // Call the callback after the animation is officially over.\n   if (e.target.className.includes('BookListAnimation')) {\n      if (this.state.style.opacity === 0) {\n        this.setState({\n          show: false\n        }, this.execCallback);\n      }\n    }\n  }\n\n  execCallback() {\n    if (this.callback !== undefined) {\n      this.callback();\n    }\n  }\n\n  isComplete() {\n    return this.props.book.current_page === this.props.book.length && !this.state.open;\n  }\n\n  renderButton() {\n    if (this.isComplete()) {\n      // A check button to trigger adding to the completed list.\n      return (\n          <Button\n              variant={\"success\"}\n              className=\"btn-sm\"\n              onClick={() => this.onClick()}\n              disabled={this.props.disabled}\n          >\n            <Check />\n          </Button>\n      );\n    } else {\n      // Otherwise the button to trigger the collapse section.\n      return (\n          <Button\n              variant={this.state.open? \"secondary\" : \"primary\"}\n              onClick={() => this.onClick()}\n              aria-controls=\"book-config-collapse\"\n              aria-expanded={this.state.open}\n              className=\"btn-sm\"\n              disabled={this.props.disabled}\n          >\n            <PencilSquare />\n          </Button>\n      );\n    }\n  }\n\n  onClick() {\n    if (this.isComplete()) {\n      this.invisibleStyle(() => this.props.finishBook());\n    } else {\n      this.setState({\n        open: !this.state.open\n      });\n    }\n  }\n\n  render() {\n    // We and this with the show so that when it is invisible we force React to\n    // unmount the component (otherwise it would stick around forever).\n    // Also cool animation with remove and update book. Basically, once the\n    // style is invisible, we run that callback and then unmount because\n    // show becomes false.\n    return (\n        this.state.show &&\n        <ListGroup.Item style={this.state.style} onTransitionEnd={(event) => this.transitionEnd(event)} className=\"BookListAnimation\">\n          <Container>\n            <Row className=\"align-items-center\">\n              <Col lg={4} sm={12} xs={12} className=\"px-0 py-2\">\n                <h4 className=\"mb-0\">{this.props.book.title}</h4>\n              </Col>\n              <Col lg={7} sm={12} xs={12} className=\"px-0 py-2\">\n                <ProgressBar\n                    variant={this.props.book.current_page >= this.props.book.length? \"success\" : \"info\"}\n                    now={(this.props.book.current_page / this.props.book.length) * 100}\n                    label={Math.floor((this.props.book.current_page / this.props.book.length) * 100) + '%'}\n                    style={{width: \"100%\"}}\n                    disabled={this.props.disabled}\n                />\n              </Col>\n              <Col lg={{ span: 1, offset: 0}} sm={{ span: 12, offset: 0 }} xs={{ span: 12, offset: 0}} className=\"py-2 text-center\">\n                {this.renderButton()}\n              </Col>\n            </Row>\n            <Row>\n              <Col>\n                <Collapse in={this.state.open}>\n                  <div id=\"book-config-collapse\">\n                    <div className=\"pt-3 pb-3\">\n                      <BookPageConfigForm\n                          updateBook={(p, m) => this.props.updateBook(p, m) }\n                          removeBook={() => this.invisibleStyle(() => this.props.removeBook()) }\n                          // current_page={this.props.book.current_page}\n                          // length={this.props.book.length}\n                          {...this.props.book}\n                      />\n                    </div>\n                  </div>\n                </Collapse>\n              </Col>\n            </Row>\n          </Container>\n        </ListGroup.Item>\n    );\n  }\n}","/home/jack/Dev/Projects/book_track/src/components/BookPageConfigForm.js",["74","75","76","77","78"],"import React from 'react';\nimport {Collapse, Button, FormControl, ListGroup, Container, Row, Col, ProgressBar, InputGroup} from 'react-bootstrap';\nimport {PencilSquare, Check, Trash, Globe} from 'react-bootstrap-icons';\n\nfunction handleProgressChange(event, props) {\n  if (isNaN(Number(event.target.value))) {\n    return;\n  }\n  if (Number(event.target.value) > props.length) {\n    event.target.value = props.length;\n  }\n  props.updateBook(Number(event.target.value), props.length);\n}\n\nfunction handleMaxChange(event, props) {\n  if (isNaN(Number(event.target.value))) {\n    return;\n  }\n  props.updateBook(props.current_page, Number(event.target.value));\n}\n\nexport default function BookPageConfigForm(props) {\n  return (\n    <Container className=\"w-100 p-0\">\n      <hr></hr>\n      <Row className=\"pt-3 pb-3 align-items-center\">\n        <Col\n            lg={3}\n            md={3}\n            sm={3}\n            xs={12}\n            className=\"px-0 py-2\"\n        >\n          <InputGroup size=\"sm\">\n            <InputGroup.Prepend>\n              <InputGroup.Text>\n                Page #\n              </InputGroup.Text>\n            </InputGroup.Prepend>\n            <FormControl\n              placeholder={props.current_page}\n              onChange={(event) => handleProgressChange(event, props)}\n            />\n          </InputGroup>\n        </Col>\n        <Col\n            lg={{ span: 4, offset: 1 }}\n            md={{ span: 4, offset: 1 }}\n            sm={{ span: 4, offset: 1 }}\n            xs={12}\n            className=\"px-0 py-2\"\n        >\n          <InputGroup size=\"sm\">\n            <InputGroup.Prepend>\n              <InputGroup.Text>\n                Max Page #\n              </InputGroup.Text>\n            </InputGroup.Prepend>\n            <FormControl\n              placeholder={props.length}\n              onChange={(event) => handleMaxChange(event, props)}\n            />\n          </InputGroup>\n        </Col>\n        {(props.link === '')? <></> :\n            <Col\n                className=\"px-0 py-2 text-center\"\n                lg={{ span: 1, offset: 0}}\n                md={{ span: 1, offset: 0 }}\n                sm={{ span: 1, offset: 4 }}\n                xs={{ span: 1, offset: 0 }}\n            >\n              <Button\n                variant=\"info\"\n                className=\"btn-sm\"\n                href={props.link}\n                onClick={(e) => {\n                  e.preventDefault();\n                  window.open(props.link);\n                }}\n              >\n                <Globe />\n              </Button>\n            </Col>}\n        <Col\n             className=\"px-0 py-2 text-center\"\n             lg={{ span: 1, offset: (props.link === '')? 3 : 2 }}\n             md={{ span: 1, offset: (props.link === '')? 3 : 2 }}\n             sm={{ span: 1, offset: (props.link === '')? 5 : 3 }}\n             xs={{ span: 1, offset: 9 }}\n        >\n          <Button\n            variant=\"danger\"\n            className=\"btn-sm\"\n            onClick={() => props.removeBook()}\n          >\n            <Trash/> \n          </Button>\n        </Col>\n      </Row>\n    </Container>\n  );\n}\n","/home/jack/Dev/Projects/book_track/src/views/Splash.js",[],{"ruleId":"79","severity":1,"message":"80","line":11,"column":5,"nodeType":"81","messageId":"82","endLine":11,"endColumn":9},{"ruleId":"83","replacedBy":"84"},{"ruleId":"85","replacedBy":"86"},{"ruleId":"79","severity":1,"message":"87","line":2,"column":9,"nodeType":"81","messageId":"82","endLine":2,"endColumn":17},{"ruleId":"79","severity":1,"message":"88","line":2,"column":19,"nodeType":"81","messageId":"82","endLine":2,"endColumn":25},{"ruleId":"79","severity":1,"message":"89","line":2,"column":27,"nodeType":"81","messageId":"82","endLine":2,"endColumn":31},{"ruleId":"79","severity":1,"message":"90","line":3,"column":20,"nodeType":"81","messageId":"82","endLine":3,"endColumn":28},{"ruleId":"79","severity":1,"message":"91","line":4,"column":15,"nodeType":"81","messageId":"82","endLine":4,"endColumn":22},{"ruleId":"79","severity":1,"message":"92","line":2,"column":8,"nodeType":"81","messageId":"82","endLine":2,"endColumn":18},{"ruleId":"79","severity":1,"message":"93","line":4,"column":20,"nodeType":"81","messageId":"82","endLine":4,"endColumn":27},{"ruleId":"79","severity":1,"message":"94","line":2,"column":41,"nodeType":"81","messageId":"82","endLine":2,"endColumn":51},{"ruleId":"79","severity":1,"message":"95","line":1,"column":16,"nodeType":"81","messageId":"82","endLine":1,"endColumn":26},{"ruleId":"79","severity":1,"message":"96","line":1,"column":28,"nodeType":"81","messageId":"82","endLine":1,"endColumn":36},{"ruleId":"79","severity":1,"message":"97","line":2,"column":70,"nodeType":"81","messageId":"82","endLine":2,"endColumn":78},{"ruleId":"79","severity":1,"message":"98","line":2,"column":27,"nodeType":"81","messageId":"82","endLine":2,"endColumn":38},{"ruleId":"79","severity":1,"message":"94","line":2,"column":85,"nodeType":"81","messageId":"82","endLine":2,"endColumn":95},{"ruleId":"79","severity":1,"message":"99","line":3,"column":30,"nodeType":"81","messageId":"82","endLine":3,"endColumn":35},{"ruleId":"79","severity":1,"message":"90","line":2,"column":9,"nodeType":"81","messageId":"82","endLine":2,"endColumn":17},{"ruleId":"79","severity":1,"message":"100","line":2,"column":40,"nodeType":"81","messageId":"82","endLine":2,"endColumn":49},{"ruleId":"79","severity":1,"message":"101","line":2,"column":72,"nodeType":"81","messageId":"82","endLine":2,"endColumn":83},{"ruleId":"79","severity":1,"message":"102","line":3,"column":9,"nodeType":"81","messageId":"82","endLine":3,"endColumn":21},{"ruleId":"79","severity":1,"message":"103","line":3,"column":23,"nodeType":"81","messageId":"82","endLine":3,"endColumn":28},"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","no-native-reassign",["104"],"no-negated-in-lhs",["105"],"'Animated' is defined but never used.","'Easing' is defined but never used.","'View' is defined but never used.","'Collapse' is defined but never used.","'GraphUp' is defined but never used.","'IconHeader' is defined but never used.","'Spinner' is defined but never used.","'InputGroup' is defined but never used.","'forwardRef' is defined but never used.","'useState' is defined but never used.","'Dropdown' is defined but never used.","'FormControl' is defined but never used.","'Trash' is defined but never used.","'ListGroup' is defined but never used.","'ProgressBar' is defined but never used.","'PencilSquare' is defined but never used.","'Check' is defined but never used.","no-global-assign","no-unsafe-negation"]