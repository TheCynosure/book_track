[{"/home/jack/Dev/Projects/book_track/src/index.js":"1","/home/jack/Dev/Projects/book_track/src/components/BookList.js":"2","/home/jack/Dev/Projects/book_track/src/views/Main.js":"3","/home/jack/Dev/Projects/book_track/src/components/NewBookButton.js":"4","/home/jack/Dev/Projects/book_track/src/components/NewBookCreationModal.js":"5","/home/jack/Dev/Projects/book_track/src/components/BookListEntry.js":"6","/home/jack/Dev/Projects/book_track/src/components/BookPageConfigForm.js":"7","/home/jack/Dev/Projects/book_track/src/components/ReadingGoalProgressBar.js":"8","/home/jack/Dev/Projects/book_track/src/views/Header.js":"9","/home/jack/Dev/Projects/book_track/src/views/Stats.js":"10","/home/jack/Dev/Projects/book_track/src/components/IconHeader.js":"11"},{"size":281,"mtime":1606959277633,"results":"12","hashOfConfig":"13"},{"size":862,"mtime":1606951589441,"results":"14","hashOfConfig":"13"},{"size":7056,"mtime":1606960034316,"results":"15","hashOfConfig":"13"},{"size":477,"mtime":1606949031303,"results":"16","hashOfConfig":"13"},{"size":2902,"mtime":1606949031303,"results":"17","hashOfConfig":"13"},{"size":4821,"mtime":1606960624561,"results":"18","hashOfConfig":"13"},{"size":1859,"mtime":1606949031303,"results":"19","hashOfConfig":"13"},{"size":683,"mtime":1606953215492,"results":"20","hashOfConfig":"13"},{"size":731,"mtime":1606960933220,"results":"21","hashOfConfig":"13"},{"size":229,"mtime":1606959545409,"results":"22","hashOfConfig":"13"},{"size":2162,"mtime":1606960512000,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"shuapd",{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"26"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"26"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"26"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"43"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"26"},"/home/jack/Dev/Projects/book_track/src/index.js",[],["53","54"],"/home/jack/Dev/Projects/book_track/src/components/BookList.js",["55"],"import React from 'react';\nimport {Container, Row, Col, ListGroup, InputGroup} from 'react-bootstrap';\nimport BookListEntry from './BookListEntry';\n\nexport default function BookList(props) {\n  // If active then render the extra information.\n  return (\n    <Container>\n      <Row>\n      </Row>\n      <Row>\n        <Col>\n          <ListGroup>\n            {props.books.map((book, index) => \n              <BookListEntry\n                book={book}\n                updateBook={(current_page, length) => props.updateBook(book.title)(current_page, length)}\n                removeBook={() => props.removeBook(book.title)}\n                finishBook={() => props.finishBook(book.title)}\n                key={book.title}\n                disabled={props.disabled}\n              />\n            )}\n          </ListGroup>\n        </Col>\n      </Row>\n    </Container>\n  );\n}\n\n","/home/jack/Dev/Projects/book_track/src/views/Main.js",["56","57"],"import React from 'react';\nimport IconHeader from '../components/IconHeader';\nimport BookList from '../components/BookList';\nimport {Container, Spinner, Row, Col} from 'react-bootstrap';\nimport NewBookButton from '../components/NewBookButton';\nimport NewBookCreationModal from '../components/NewBookCreationModal';\nimport Confetti from 'react-confetti';\nimport ReactTimeout from 'react-timeout';\nimport ReadingGoalProgressBar from '../components/ReadingGoalProgressBar';\n\nclass Main extends React.Component {\n  \n  constructor(props) {\n    super(props);\n    this.state = {\n      books: [],\n      history: [],\n      showAddModal: false,\n      windowSize: {width: undefined, height: undefined},\n      showConfetti: false,\n      isLoaded: false,\n    }\n  }\n\n  handleResize() {\n     this.setState({windowSize: {\n       width: window.innerWidth,\n       height: window.innerHeight,\n     }});\n  }\n\n  componentDidMount() {\n    window.addEventListener(\"resize\", () => this.handleResize());\n    this.getAllBooks();\n  }\n\n  componentWillUnmount() {\n    window.addEventListener(\"resize\", () => this.handleResize());\n  }\n\n  async getAllBooks() {\n    await this.getBooks();\n    await this.getBooks(true);\n  }\n\n  async getBooks(fromHistory=false) {\n    // Before the fetch make sure the page knows we are loading.\n    const location =\n        'http://localhost:8080/' + ((fromHistory)? 'history' : 'books');\n    fetch(location).then((res) => {\n        if (res.status === 304) {\n          // There is nothing to change\n          this.setState({ isLoaded: false });\n        } else {\n          res.json().then((result) => {\n            // Response was successful!\n            if (fromHistory) {\n              this.setState({ history: result, isLoaded: true });\n            } else {\n              this.setState({ books: result, isLoaded: true });\n            }\n          }).catch((error) => {\n            console.log(error)\n            this.setState({ isLoaded: true, error });\n          });\n        }\n      },\n      (error) => {\n        // TODO: We should retry on network error.\n        console.error(error);\n        this.setState({isLoaded: true, error});\n      });\n  }\n\n  updateBook(book_title) {\n    return async (new_current_page, new_length) => {\n      let books = this.state.books.slice();\n      const book_to_update =\n          books.find(book => book.title === book_title);\n      book_to_update.current_page = new_current_page;\n      book_to_update.length = new_length;\n\n      const headers = new Headers();\n      headers.append('Content-Type', 'application/json');\n\n      const settings = {\n        method: 'PUT',\n        headers,\n        body: JSON.stringify(book_to_update)\n      }\n\n      const request = new Request('http://localhost:8080/books', settings);\n      const response = await fetch(request);\n\n      if (response.status === 200) {\n        this.setState({ isLoaded: true });\n        await this.getAllBooks();\n      }\n    }\n  }\n\n  async removeBook(book_title) {\n    this.setState({ isLoaded: false });\n    let books = this.state.books.slice();\n    let finished_book =\n        books.filter(curr_book => curr_book.title === book_title);\n    if (finished_book.length === 0) {\n      console.error('No matching book for one deleted.');\n      return;\n    }\n    console.log(finished_book[0].title)\n\n    const headers = new Headers();\n    headers.append('Content-Type', 'application/json');\n\n    const settings = {\n      method: 'DELETE',\n      headers,\n      body: JSON.stringify(finished_book[0])\n    }\n\n    const request = new Request('http://localhost:8080/books', settings);\n    const response = await fetch(request);\n\n    if (response.status === 200) {\n      this.setState({ isLoaded: true });\n      await this.getAllBooks();\n    }\n\n    return finished_book;\n  }\n\n  finishBook(book_title) {\n    let finished_book =\n        this.state.books.filter(book => book.title === book_title)[0];\n    this.removeBook(book_title).then(() => {\n      this.spawnConfetti();\n      this.addBook(finished_book.title, finished_book.length, true);\n    });\n  }\n\n  promptNewBookModal() {\n    this.setState({showAddModal: true});\n  }\n\n  async addBook(title, length, toHistory=false) {\n    this.setState({ isLoaded: false });\n    // We are going to post the new book, and on success re-fetch all the data.\n    const new_book = {\n      title: title,\n      current_page: (toHistory)? length : 0,\n      length: length\n    };\n    const headers = new Headers();\n    headers.append('Content-Type', 'application/json');\n\n    const settings = {\n      method: 'POST',\n      headers,\n      body: JSON.stringify(new_book)\n    }\n\n    const location =\n        \"http://localhost:8080/\" + ((toHistory)? \"history\" : \"books\");\n\n    this.setState({showAddModal: false});\n    const request = new Request(location, settings);\n    const response = await fetch(request);\n\n    if (response.status === 200) {\n      this.setState({ isLoaded: true });\n      await this.getAllBooks();\n    }\n  }\n\n  spawnConfetti() {\n    this.setState({\n      showConfetti: true\n    });\n  }\n\n  onConfettiComplete(confetti) {\n    this.setState({ showConfetti: false })\n    confetti.reset();\n  }\n\n  isTitleUnique(title) {\n    return this.state.books.filter((curr) => curr.title === title).length === 0\n  }\n\n  renderBookHistory() {\n    if (this.state.history.length > 0) {\n      return (\n        <Container className=\"p-0\">\n          <Row className=\"p-0\">\n            <Col>\n              <ReadingGoalProgressBar\n                  current={this.state.history.length}\n                  total={this.state.history.length + this.state.books.length}\n              />\n            </Col>\n          </Row>\n          <Row className=\"p-0\">\n            <Col>\n              <BookList\n                  books={this.state.history}\n                  disabled={true}\n              />\n            </Col>\n          </Row>\n        </Container>\n      );\n    }\n  }\n\n  renderMainScreen() {\n    const width = this.state.windowSize.width;\n    const height = this.state.windowSize.height;\n    return (\n      <Container>\n        <Confetti\n          width={width}\n          height={height}\n          recycle={false}\n          numberOfPieces={this.state.showConfetti ? 500 : 0}\n          onConfettiComplete={(confetti) => this.onConfettiComplete(confetti)}\n        />\n        <BookList\n          books={this.state.books}\n          updateBook={(index) => this.updateBook(index)}\n          removeBook={(index) => this.removeBook(index)}\n          finishBook={(index) => this.finishBook(index)}\n        />\n        <NewBookButton handleNewBook={() => this.promptNewBookModal()}/>\n        {this.renderBookHistory()}\n        <NewBookCreationModal\n          show={this.state.showAddModal}\n          onAdd={(title, length) => this.addBook(title, length)}\n          onCancel={() => this.setState({showAddModal: false})}\n          checkValid={(title) => this.isTitleUnique(title)}\n        />\n      </Container>\n    );\n  }\n\n  render() {\n    return (\n      <Container>\n        {this.renderMainScreen()}\n      </Container>\n    );\n  }\n}\n\nexport default ReactTimeout(Main);\n","/home/jack/Dev/Projects/book_track/src/components/NewBookButton.js",[],"/home/jack/Dev/Projects/book_track/src/components/NewBookCreationModal.js",[],"/home/jack/Dev/Projects/book_track/src/components/BookListEntry.js",["58","59","60"],"import React from 'react';\nimport {Collapse, Button, FormControl, ListGroup, Container, Row, Col, ProgressBar, InputGroup} from 'react-bootstrap';\nimport {PencilSquare, Check, Trash} from 'react-bootstrap-icons';\nimport BookPageConfigForm from './BookPageConfigForm';\n\nexport default class BookListEntry extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      open: false,\n      show: true,\n      style: {\n        opacity: 0,\n      }\n    }\n  }\n\n  componentDidMount() {\n    // Shortly after mounting we will render the element visible.\n    setTimeout(() => this.visibleStyle(), 10);\n  }\n  //\n  // componentWillReceiveProps(newProps, nextContext) {\n  //   if () {\n  //     return this.invisibleStyle();\n  //   }\n  //\n  //   // Otherwise, we should be visible!\n  //   this.setState({\n  //     show: true\n  //   });\n  //   setTimeout(() => this.visibleStyle(), 10);\n  // }\n\n  visibleStyle() {\n    this.setState({\n      style: {\n        opacity: 1,\n        transition: 'all .3s ease'\n      }\n    })\n  }\n\n  invisibleStyle(callback) {\n    this.callback = callback;\n    this.setState({\n      open: false,\n      style: {\n        opacity: 0,\n        transition: 'all .3s ease'\n      }\n    });\n  }\n\n  transitionEnd(e) {\n    // Call the callback after the animation is officially over.\n   if (e.target.className.includes('BookListAnimation')) {\n      if (this.state.style.opacity === 0) {\n        this.setState({\n          show: false\n        }, this.execCallback);\n      }\n    }\n  }\n\n  execCallback() {\n    if (this.callback !== undefined) {\n      this.callback();\n    }\n  }\n\n  isComplete() {\n    return this.props.book.current_page === this.props.book.length && !this.state.open;\n  }\n\n  renderButton() {\n    if (this.isComplete()) {\n      // A check button to trigger adding to the completed list.\n      return (\n          <Button\n              variant={\"success\"}\n              className=\"btn-sm\"\n              onClick={() => this.onClick()}\n              disabled={this.props.disabled}\n          >\n            <Check />\n          </Button>\n      );\n    } else {\n      // Otherwise the button to trigger the collapse section.\n      return (\n          <Button\n              variant={this.state.open? \"secondary\" : \"primary\"}\n              onClick={() => this.onClick()}\n              aria-controls=\"book-config-collapse\"\n              aria-expanded={this.state.open}\n              className=\"btn-sm\"\n              disabled={this.props.disabled}\n          >\n            <PencilSquare />\n          </Button>\n      );\n    }\n  }\n\n  onClick() {\n    if (this.isComplete()) {\n      this.invisibleStyle(() => this.props.finishBook());\n    } else {\n      this.setState({\n        open: !this.state.open\n      });\n    }\n  }\n\n  render() {\n    // We and this with the show so that when it is invisible we force React to\n    // unmount the component (otherwise it would stick around forever).\n    // Also cool animation with remove and update book. Basically, once the\n    // style is invisible, we run that callback and then unmount because\n    // show becomes false.\n    return (\n        this.state.show &&\n        <ListGroup.Item style={this.state.style} onTransitionEnd={(event) => this.transitionEnd(event)} className=\"BookListAnimation\">\n          <Container>\n            <Row className=\"align-items-center\">\n              <Col sm={3}>\n                <h4 className=\"mb-0\">{this.props.book.title}</h4>\n              </Col>\n              <Col sm={1}>\n              </Col>\n              <Col sm={7}>\n                <ProgressBar\n                    variant={this.props.book.current_page >= this.props.book.length? \"success\" : \"info\"}\n                    now={(this.props.book.current_page / this.props.book.length) * 100}\n                    label={Math.floor((this.props.book.current_page / this.props.book.length) * 100) + '%'}\n                    style={{width: \"100%\"}}\n                    disabled={this.props.disabled}\n                />\n              </Col>\n              <Col xs={1}>\n                {this.renderButton()}\n              </Col>\n            </Row>\n            <Row>\n              <Col>\n                <Collapse in={this.state.open}>\n                  <div id=\"book-config-collapse\">\n                    <div className=\"pt-3 pb-3\">\n                      <BookPageConfigForm\n                          updateBook={(p, m) => this.props.updateBook(p, m) }\n                          removeBook={() => this.invisibleStyle(() => this.props.removeBook()) }\n                          current_page={this.props.book.current_page}\n                          length={this.props.book.length}\n                      />\n                    </div>\n                  </div>\n                </Collapse>\n              </Col>\n            </Row>\n          </Container>\n        </ListGroup.Item>\n    );\n  }\n}","/home/jack/Dev/Projects/book_track/src/components/BookPageConfigForm.js",["61","62","63","64","65"],"import React from 'react';\nimport {Collapse, Button, FormControl, ListGroup, Container, Row, Col, ProgressBar, InputGroup} from 'react-bootstrap';\nimport {PencilSquare, Check, Trash} from 'react-bootstrap-icons';\n\nfunction handleProgressChange(event, props) {\n  if (isNaN(Number(event.target.value))) {\n    return;\n  }\n  if (Number(event.target.value) > props.length) {\n    event.target.value = props.length;\n  }\n  props.updateBook(Number(event.target.value), props.length);\n}\n\nfunction handleMaxChange(event, props) {\n  if (isNaN(Number(event.target.value))) {\n    return;\n  }\n  props.updateBook(props.current_page, Number(event.target.value));\n}\n\nexport default function BookPageConfigForm(props) {\n  return (\n    <Container className=\"w-100 p-0\">\n      <hr></hr>\n      <Row className=\"pt-3 pb-3\">  \n        <Col sm={3}>\n          <InputGroup>\n            <InputGroup.Prepend>\n              <InputGroup.Text>\n                Page #\n              </InputGroup.Text>\n            </InputGroup.Prepend>\n            <FormControl\n              placeholder={props.current_page}\n              onChange={(event) => handleProgressChange(event, props)}\n            />\n          </InputGroup>\n        </Col>\n        <Col sm={3}>\n          <InputGroup>\n            <InputGroup.Prepend>\n              <InputGroup.Text>\n                Max Page #\n              </InputGroup.Text>\n            </InputGroup.Prepend>\n            <FormControl\n              placeholder={props.length}\n              onChange={(event) => handleMaxChange(event, props)}\n            />\n          </InputGroup>\n        </Col>\n        <Col md={{ span: 1, offset: 5}}>\n          <Button\n            variant=\"danger\"\n            className=\"btn-sm\"\n            onClick={() => props.removeBook()}\n          >\n            <Trash/> \n          </Button>\n        </Col>\n      </Row>\n    </Container>\n  );\n}\n",["66","67"],"/home/jack/Dev/Projects/book_track/src/components/ReadingGoalProgressBar.js",[],"/home/jack/Dev/Projects/book_track/src/views/Header.js",[],"/home/jack/Dev/Projects/book_track/src/views/Stats.js",[],"/home/jack/Dev/Projects/book_track/src/components/IconHeader.js",["68","69","70","71"],"import React from 'react';\nimport {Animated, Easing, View} from 'react-native';\nimport {Container, Collapse} from 'react-bootstrap';\nimport {Book, GraphUp} from 'react-bootstrap-icons';\n\nclass IconHeader extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            style: {\n                opacity: 1\n            }\n        }\n    }\n\n    componentWillReceiveProps(nextProps, nextContext) {\n        if (nextProps.showBook !== this.props.showBook) {\n            // They want us to switch! Start the visibility transition.\n            setTimeout(() => this.visibleStyle(), 10);\n        }\n    }\n\n    visibleStyle(callback) {\n        this.callback = callback;\n        this.setState({\n            style: {\n                opacity: 1,\n                transition: 'all .2s ease'\n            }\n        });\n    }\n\n    invisibleStyle(callback) {\n        this.callback = callback;\n        this.setState({\n            open: false,\n            style: {\n                opacity: 0,\n                transition: 'all .2s ease'\n            }\n        });\n    }\n\n    transitionEnd(e) {\n        // Call the callback after the animation is officially over.\n        if (e.target.className.includes(\"IconHeader\")) {\n            this.execCallback();\n        }\n    }\n\n    execCallback() {\n        if (this.callback !== undefined) {\n            this.callback();\n        }\n    }\n\n    onClick() {\n        // First make this invisible.\n        this.invisibleStyle(() => {\n            // Once invisible, we want to call the parents function.\n            this.props.onClick();\n        })\n    }\n\n    render() {\n        return (\n            <Container className=\"mt-5 mb-5 text-center\">\n                <h1\n                    onTransitionEnd={(e) => this.transitionEnd(e)}\n                    className={\"IconHeader\"}\n                    style={this.state.style}\n                >\n                    {this.props.showBook?\n                        <Book onClick={() => this.onClick()}/> :\n                        <GraphUp onClick={() => this.onClick()}/> }\n                </h1>\n            </Container>\n        );\n    }\n}\n\nexport default IconHeader;\n",{"ruleId":"72","replacedBy":"73"},{"ruleId":"74","replacedBy":"75"},{"ruleId":"76","severity":1,"message":"77","line":2,"column":41,"nodeType":"78","messageId":"79","endLine":2,"endColumn":51},{"ruleId":"76","severity":1,"message":"80","line":2,"column":8,"nodeType":"78","messageId":"79","endLine":2,"endColumn":18},{"ruleId":"76","severity":1,"message":"81","line":4,"column":20,"nodeType":"78","messageId":"79","endLine":4,"endColumn":27},{"ruleId":"76","severity":1,"message":"82","line":2,"column":27,"nodeType":"78","messageId":"79","endLine":2,"endColumn":38},{"ruleId":"76","severity":1,"message":"77","line":2,"column":85,"nodeType":"78","messageId":"79","endLine":2,"endColumn":95},{"ruleId":"76","severity":1,"message":"83","line":3,"column":30,"nodeType":"78","messageId":"79","endLine":3,"endColumn":35},{"ruleId":"76","severity":1,"message":"84","line":2,"column":9,"nodeType":"78","messageId":"79","endLine":2,"endColumn":17},{"ruleId":"76","severity":1,"message":"85","line":2,"column":40,"nodeType":"78","messageId":"79","endLine":2,"endColumn":49},{"ruleId":"76","severity":1,"message":"86","line":2,"column":72,"nodeType":"78","messageId":"79","endLine":2,"endColumn":83},{"ruleId":"76","severity":1,"message":"87","line":3,"column":9,"nodeType":"78","messageId":"79","endLine":3,"endColumn":21},{"ruleId":"76","severity":1,"message":"88","line":3,"column":23,"nodeType":"78","messageId":"79","endLine":3,"endColumn":28},{"ruleId":"72","replacedBy":"89"},{"ruleId":"74","replacedBy":"90"},{"ruleId":"76","severity":1,"message":"91","line":2,"column":9,"nodeType":"78","messageId":"79","endLine":2,"endColumn":17},{"ruleId":"76","severity":1,"message":"92","line":2,"column":19,"nodeType":"78","messageId":"79","endLine":2,"endColumn":25},{"ruleId":"76","severity":1,"message":"93","line":2,"column":27,"nodeType":"78","messageId":"79","endLine":2,"endColumn":31},{"ruleId":"76","severity":1,"message":"84","line":3,"column":20,"nodeType":"78","messageId":"79","endLine":3,"endColumn":28},"no-native-reassign",["94"],"no-negated-in-lhs",["95"],"no-unused-vars","'InputGroup' is defined but never used.","Identifier","unusedVar","'IconHeader' is defined but never used.","'Spinner' is defined but never used.","'FormControl' is defined but never used.","'Trash' is defined but never used.","'Collapse' is defined but never used.","'ListGroup' is defined but never used.","'ProgressBar' is defined but never used.","'PencilSquare' is defined but never used.","'Check' is defined but never used.",["94"],["95"],"'Animated' is defined but never used.","'Easing' is defined but never used.","'View' is defined but never used.","no-global-assign","no-unsafe-negation"]